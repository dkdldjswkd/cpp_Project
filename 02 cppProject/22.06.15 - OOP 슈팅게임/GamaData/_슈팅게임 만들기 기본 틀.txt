//--------------------------------------------------------------------
// GetAsyncKeyState(int iKey)  #include <Windows.h>
//
// 윈도우 API 로 키보드가 눌렸는지를 확인한다.
// 인자로 키보드 버튼에 대한 디파인 값을 넣으면 해당 키가 눌렸는지 (눌렸던적이 있는지) 를 확인 해준다.
// 모든 키에대한 확인이 가능하고, 논블럭 체크가 되므로 게임에서도 쓰기 좋다.
//
// Virtual-Key Codes
//
// VK_SPACE / VK_ESCAPE / VK_LEFT / VK_UP / 키보드 문자는 대문자 아스키 코드와 같음.
// winuser.h 파일에 위와 같이 디파인 되어 있다.
//
//
// GetAsyncKeyState(VK_LEFT) 호출시 결과값은
//
// 0x0001  > *이전 체크 이후 눌린적이 있음
// 0x8000  > 지금 눌려있음
// 0x8001  > *이전 체크 이후 눌린적도 있고 지금도 눌려 있음
//
// * 이전 체크라는건 이전에 GetAsyncKeyState 를 호출한 때를 말 한다.
// 
// 10프레임 짜리 게임이라면 1초에 10회의 키 체크를 하게 되므로 체크 간격은 20ms 가 된다.
// 빠른 커맨드 입력이 필요한 게임에서는 20ms 이내에 여러개의 키입력이 있다면 체크하지 못하는 키 입력이 발생 할 수 있다.
// 그래서 0x0001 비트에 대한 처리도 필요하다.

# 씬구현

	타이틀 / 게임 / 게임오버 

# exit 함수 사용 금지


# cpp,h  소스파일 main 외 2개 이상 만들기


# Stage 데이터 파일 외부로 분리하기


	Stage.txt

		10
		stage1.txt
		stage2.txt
		stage3.txt
		...
		...


	stage1.txt

		적군의 배치 + 적군의 종류 (1,2,3 / a,b,c )






//////////////// 기본 틀 //////////////////////////

g_Scene
g_Stage

main
{
	초기화...

	while ( 1 )	
	{
		switch ( g_Scene )
		{
			case TITLE:
				UpdateTitle()
				{
					키보드 입력
					메뉴 랜더링

					게임시작! 메뉴선택시 게임씬 전환
					g_Stage = 1;
					g_Scene = LOAD;
				}
				break;

			case LOAD:
				게임씬을 위한 Stage 데이터 로딩 초기화
				g_Scene = GAME;
				break;


			case GAME:
				UpdateGame()
				{
					키보드
					로직
					if ( 스테이지 클리어 조건 )
					{
						g_Stage++;
						g_Scene = LOAD;
					}

					랜더
				
				}
				break;

			case CLEAR:
				UpdateClear();
				break;
			case OVER:
				UpdateOver();
				break;
		}

	}

}



