송수신 큐 클래스 필요 함수

생성자.

CRingBuffer(void);
CRingBuffer(int iBufferSize);

void	Resize(int size);

int	GetBufferSize(void);

/////////////////////////////////////////////////////////////////////////
// 현재 사용중인 용량 얻기.
//
// Parameters: 없음.
// Return: (int)사용중인 용량.
/////////////////////////////////////////////////////////////////////////
int	GetUseSize(void);

/////////////////////////////////////////////////////////////////////////
// 현재 버퍼에 남은 용량 얻기. 
//
// Parameters: 없음.
// Return: (int)남은용량.
/////////////////////////////////////////////////////////////////////////
int	GetFreeSize(void);

/////////////////////////////////////////////////////////////////////////
// 버퍼 포인터로 외부에서 한방에 읽고, 쓸 수 있는 길이.
// (끊기지 않은 길이)
//
// 원형 큐의 구조상 버퍼의 끝단에 있는 데이터는 끝 -> 처음으로 돌아가서
// 2번에 데이터를 얻거나 넣을 수 있음. 이 부분에서 끊어지지 않은 길이를 의미
//
// Parameters: 없음.
// Return: (int)사용가능 용량.
////////////////////////////////////////////////////////////////////////
int	DirectEnqueueSize(void);	
int	DirectDequeueSize(void);


/////////////////////////////////////////////////////////////////////////
// WritePos 에 데이타 넣음.
//
// Parameters: (char *)데이타 포인터. (int)크기. 
// Return: (int)넣은 크기.
/////////////////////////////////////////////////////////////////////////
int	Enqueue(char *chpData, int iSize);

/////////////////////////////////////////////////////////////////////////
// ReadPos 에서 데이타 가져옴. ReadPos 이동.
//
// Parameters: (char *)데이타 포인터. (int)크기.
// Return: (int)가져온 크기.
/////////////////////////////////////////////////////////////////////////
int	Dequeue(char *chpDest, int iSize);

/////////////////////////////////////////////////////////////////////////
// ReadPos 에서 데이타 읽어옴. ReadPos 고정.
//
// Parameters: (char *)데이타 포인터. (int)크기.
// Return: (int)가져온 크기.
/////////////////////////////////////////////////////////////////////////
int	Peek(char *chpDest, int iSize);


/////////////////////////////////////////////////////////////////////////
// 원하는 길이만큼 읽기위치 에서 삭제 / 쓰기 위치 이동
//
// Parameters: 없음.
// Return: 없음.
/////////////////////////////////////////////////////////////////////////
void	MoveRear(int iSize);
int	MoveFront(int iSize);

/////////////////////////////////////////////////////////////////////////
// 버퍼의 모든 데이타 삭제.
//
// Parameters: 없음.
// Return: 없음.
/////////////////////////////////////////////////////////////////////////
void	ClearBuffer(void);


/////////////////////////////////////////////////////////////////////////
// 버퍼의 Front 포인터 얻음.
//
// Parameters: 없음.
// Return: (char *) 버퍼 포인터.
/////////////////////////////////////////////////////////////////////////
char	*GetFrontBufferPtr(void);


/////////////////////////////////////////////////////////////////////////
// 버퍼의 RearPos 포인터 얻음.
//
// Parameters: 없음.
// Return: (char *) 버퍼 포인터.
/////////////////////////////////////////////////////////////////////////
char	*GetRearBufferPtr(void);

















그리고...

이 링버퍼 클래스를 테스트 할 테스트 프로그램.

고정된 81자의 (콘솔화면 너비와 똑같은 문자열)  문자열에서 앞 부터  랜덤한 사이즈 만큼씩 큐에 넣고,  큐에서 임의의 길이로 뽑아서 이를 출력하는 테스트.

테스트 목적 : 

	문자열에 공백이나 숫자,영문자등을 넣은 패턴의 문자열의 글자를 
	랜덤한 길이로 인큐,디큐를 반복하면서 데이터의 깨짐을 확인.


1234567890 abcdefghijklmnopqrstuvwxyz 1234567890 abcdefghijklmnopqrstuvwxyz 12345
1234567890 abcdefghijklmnopqrstuvwxyz 1234567890 abcdefghijklmnopqrstuvwxyz 12345
1234567890 abcdefghijklmnopqrstuvwxyz 1234567890 abcdefghijklmnopqrstuvwxyz 12345
1234567890 abcdefghijklmnopqrstuvwxyz 1234567890 abcdefghijklmnopqrstuvwxyz 12345
1234567890 abcdefghijklmnopqrstuvwxyz 1234567890 abcdefghijklmnopqrstuvwxyz 12345

( 큐가 잘못 되었다면  줄이 틀어짐 )

조건 - 화면에 출력되는 텍스트는 무조건 큐에서 뽑은 데이터를 출력.
조건 - \n 줄바꿈은 절대 사용되지 않음
조건 - 큐 버퍼를 작은 사이즈 (100 ~ 1000)  로 다양하게 테스트 후,  큰 사이즈도 테스트 함.
조건 - 테스트는 X 시간 ~ 밤새도록 임.
조건 - 뽑기 전 Peek 를 하여  Peek 와 dequeue 이 같은 값이 나왔는지 memcmp 하여 비교 테스트.















